# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2017-05-08 22:51
from __future__ import unicode_literals

import autoslug.fields
import cyclope.utils
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('collections', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=250, unique=True, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=True, populate_from=b'name', unique=True)),
                ('image', models.CharField(blank=True, max_length=100, verbose_name='image')),
                ('origin', models.CharField(blank=True, db_index=True, default=b'', max_length=250, verbose_name='origin')),
                ('notes', models.TextField(blank=True, default=b'', verbose_name='notes')),
                ('content_types', models.ManyToManyField(db_index=True, help_text='Select the content types this author is related to.', to='contenttypes.ContentType', verbose_name='content types')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'author',
                'verbose_name_plural': 'authors',
            },
            bases=(models.Model, cyclope.utils.ThumbnailMixin),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.CharField(blank=True, max_length=100, verbose_name='image')),
            ],
            options={
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
            },
            bases=(models.Model, cyclope.utils.ThumbnailMixin),
        ),
        migrations.CreateModel(
            name='Layout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from=b'name')),
                ('template', models.CharField(max_length=100, verbose_name='layout template')),
                ('image_path', models.CharField(default=b'main.png', max_length=100, verbose_name='layout representation')),
            ],
            options={
                'verbose_name': 'layout',
                'verbose_name_plural': 'layouts',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from=b'name')),
                ('main_menu', models.BooleanField(default=False, verbose_name='main menu')),
            ],
            options={
                'verbose_name': 'menu',
                'verbose_name_plural': 'menus',
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=True, populate_from=b'name', unique_with=(b'parent',))),
                ('site_home', models.BooleanField(default=False, verbose_name='site home')),
                ('custom_url', models.CharField(blank=True, default=b'', max_length=200, verbose_name='custom URL')),
                ('url', models.CharField(db_index=True, editable=False, max_length=255, unique=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('persistent_layout', models.BooleanField(default=False, help_text='If the layout is marked as persistent it will be in use until the user navigates to a menu item which explicitly specifies a different Layout', verbose_name='Persistent layout')),
                ('object_id', models.PositiveIntegerField(blank=True, db_index=True, null=True, verbose_name='object')),
                ('content_view', models.CharField(blank=True, default=b'', max_length=255, verbose_name='view')),
                ('view_options', jsonfield.fields.JSONField(default=b'{}')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='menu_entries', to='contenttypes.ContentType', verbose_name='type')),
                ('layout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cyclope.Layout', verbose_name='layout')),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='cyclope.Menu', verbose_name='menu')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='cyclope.MenuItem', verbose_name='parent')),
            ],
            options={
                'verbose_name': 'menu item',
                'verbose_name_plural': 'menu items',
            },
        ),
        migrations.CreateModel(
            name='RegionView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(blank=True, default=b'', max_length=100, verbose_name='region')),
                ('content_view', models.CharField(blank=True, default=b'', max_length=255, verbose_name='view')),
                ('weight', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='weight')),
                ('object_id', models.PositiveIntegerField(blank=True, db_index=True, null=True, verbose_name='object')),
                ('view_options', jsonfield.fields.JSONField(default=b'{}')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='region_views', to='contenttypes.ContentType', verbose_name='type')),
                ('layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cyclope.Layout')),
            ],
        ),
        migrations.CreateModel(
            name='RelatedContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('self_id', models.PositiveIntegerField(db_index=True)),
                ('other_id', models.PositiveIntegerField(db_index=True)),
                ('order', models.IntegerField(blank=True, db_index=True, null=True)),
                ('other_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_contents_rt', to='contenttypes.ContentType', verbose_name='content type')),
                ('self_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_contents_lt', to='contenttypes.ContentType', verbose_name='content type')),
            ],
            options={
                'ordering': ['order'],
                'verbose_name': 'related content',
                'verbose_name_plural': 'related contents',
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(max_length=250, verbose_name='templating theme')),
                ('global_title', models.CharField(blank=True, default=b'', max_length=250, verbose_name='global title')),
                ('keywords', models.TextField(blank=True, default=b'', verbose_name='keywords')),
                ('description', models.TextField(blank=True, default=b'', verbose_name='description')),
                ('allow_comments', models.CharField(choices=[(b'YES', 'enabled'), (b'NO', 'disabled')], default=b'YES', max_length=4, verbose_name='allow comments')),
                ('moderate_comments', models.BooleanField(default=False, verbose_name='moderate comments')),
                ('enable_comments_notifications', models.BooleanField(default=True, verbose_name='enable comments email notifications')),
                ('enable_abuse_reports', models.BooleanField(default=False, verbose_name='enable abuse reports')),
                ('show_author', models.CharField(choices=[(b'AUTHOR', 'author'), (b'USER', 'user if author is empty')], default=b'AUTHOR', help_text='Select which field to use to show as author of the content.', max_length=6, verbose_name='show author')),
                ('enable_ratings', models.BooleanField(default=False, verbose_name='enable rating (like/dislike) content')),
                ('enable_share_buttons', models.BooleanField(default=True, verbose_name='enable social sharing buttons (facebook, twitter, etc)')),
                ('enable_follow_buttons', models.BooleanField(default=False, verbose_name='enable social follow buttons (facebook, twitter, etc)')),
                ('social_follow_services', jsonfield.fields.JSONField(default=b'[["twitter","USERNAME"],["facebook","USERNAME"],["google","USERNAME"],["flickr","USERNAME"],["linkedin","USERNAME"],["vimeo","USERNAME"],["youtube","USERNAME"]]', help_text="Change USERNAME by your username in each service you want to enable. Eg for youtube: if your page is http://youtube.com/user/cyclope/ then replace the 'USERNAME' bellow youtube with 'cyclope'.")),
                ('enable_search_by_date', models.BooleanField(default=False, verbose_name='Enable search by date.')),
                ('head_image', models.ImageField(blank=True, help_text='select image for head: 960px width x 170px height', null=True, upload_to=b'theme/images', verbose_name='header image')),
                ('favicon_image', models.ImageField(blank=True, help_text='only in bootstrap theme. Select image for favicon, only .ico or .png: 16px width x 16px height', null=True, upload_to=b'theme/images/favicon', verbose_name='favicon')),
                ('show_head_title', models.BooleanField(default=True, help_text='show title and url site in head. If disabled, header image links to home.', verbose_name='show head title')),
                ('body_font', models.CharField(choices=[(b' ', '- Default -'), (b'architects', 'Architects'), (b'bonveno', 'Bonveno'), (b'comfortaa', 'Comfortaa'), (b'coolvetica', 'Coolvetica'), (b'earthbound', 'Earthbound'), (b'lato', 'Lato'), (b'sofia', 'Sofia'), (b'toscuchet', 'toscuchet'), (b'ubuntu', 'Ubuntu'), (b'arial', 'Arial'), (b'times new roman', 'Times New Roman'), (b'verdana', 'Verdana'), (b'custom_body', 'Custom Body')], default=b'', help_text='change the font of the body', max_length=50, verbose_name='body font')),
                ('body_custom_font', models.FileField(blank=True, help_text=b'Upload a custom font for the body. Allowed formats: .otf, .tff', null=True, upload_to=b'theme/fonts', verbose_name='body custom font')),
                ('titles_font', models.CharField(choices=[(b' ', '- Default -'), (b'architects', 'Architects'), (b'bonveno', 'Bonveno'), (b'comfortaa', 'Comfortaa'), (b'coolvetica', 'Coolvetica'), (b'earthbound', 'Earthbound'), (b'lato', 'Lato'), (b'sofia', 'Sofia'), (b'toscuchet', 'toscuchet'), (b'ubuntu', 'Ubuntu'), (b'arial', 'Arial'), (b'times new roman', 'Times New Roman'), (b'verdana', 'Verdana'), (b'custom_body', 'Custom Body')], default=b'', help_text='change the font of the head and titles', max_length=50, verbose_name='font for titles')),
                ('titles_custom_font', models.FileField(blank=True, help_text=b'Upload a custom font for head and titles. Allowed formats: .otf, .tff', null=True, upload_to=b'theme/fonts', verbose_name='titles custom font')),
                ('font_size', models.DecimalField(decimal_places=2, default=12, max_digits=4, verbose_name='font size')),
                ('hide_content_icons', models.BooleanField(default=False, help_text='Content icons are shown beside the title of the content', verbose_name='hide content icons')),
                ('skin_setting', models.CharField(default=b'bootstrap', max_length=20, verbose_name='skin setting')),
                ('default_layout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cyclope.Layout', verbose_name='default layout')),
                ('newsletter_collection', models.ForeignKey(blank=True, help_text='This is the collection that will group the contents for your newsletters.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='collections.Collection', verbose_name='newsletter collection')),
                ('rss_content_types', models.ManyToManyField(help_text='contents to show in the whole feed', to='contenttypes.ContentType', verbose_name='whole feed contents')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.Site', unique=True)),
            ],
            options={
                'verbose_name': 'site settings',
                'verbose_name_plural': 'site settings',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=250, unique=True, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from=b'name', unique=True)),
                ('link', models.CharField(blank=True, default=b'', max_length=250, verbose_name='link')),
            ],
            options={
                'verbose_name': 'source',
                'verbose_name_plural': 'sources',
            },
        ),
        migrations.CreateModel(
            name='DesignSettings',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('cyclope.sitesettings',),
        ),
    ]
